package com.jtouzy.cvapi.dao;

import java.sql.Connection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.reflections.Reflections;
import org.reflections.scanners.FieldAnnotationsScanner;
import org.reflections.scanners.SubTypesScanner;
import org.reflections.scanners.TypeAnnotationsScanner;

import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;
import com.jtouzy.cvapi.Logger;
import com.jtouzy.cvapi.dao.annotations.DAOTable;
import com.jtouzy.cvapi.dao.annotations.DAOTableField;
import com.jtouzy.cvapi.dao.annotations.DAOTableIDField;

public class DAOManager {
	private static DAOManager instance;
	private BiMap<Class<?>, String> classToTableMap;
	private Map<Class<?>, TableContext> classToFieldsMap;
	private Reflections reflections;
	private ConnectionDAOMapper daoMapper;
	
	public static DAOManager get() {
		if (instance == null) {
			instance = new DAOManager();
		}
		return instance;
	}
	
	private DAOManager() {
		init();
	}
	
	private void init() {
		classToTableMap = HashBiMap.create();
		classToFieldsMap = new HashMap<>();
		daoMapper = new ConnectionDAOMapper();
		reflections = new Reflections("com.jtouzy.cvapi.model", 
				                      new FieldAnnotationsScanner(), 
				                      new TypeAnnotationsScanner(),
				                      new SubTypesScanner());
		findModelData();
	}
	
	public ConnectionDAOMapping registerForCnx(Connection connection) {
		// TODO regarder dans DAOMapper si on retrouve cette connexion, et on renvoi le mapping
		return daoMapper.register(connection);
	}
	
	private void findModelData() {
		Set<Class<?>> modelList = reflections.getTypesAnnotatedWith(DAOTable.class);
		modelList.forEach(c -> registerClassData(c));
	}
	
	private void registerClassData(Class<?> clazz) {
		String tableName = clazz.getAnnotation(DAOTable.class).tableName();
		classToTableMap.put(clazz, tableName);
		final TableContext context = new TableContext(tableName);
		Logger.log("Enregistrement de la classe " + clazz.getCanonicalName() + " pour la table " + tableName);
		classToFieldsMap.put(clazz, context);
		reflections.getFieldsAnnotatedWith(DAOTableField.class)
		           .forEach(f -> context.putField(f, f.getAnnotation(DAOTableField.class).fieldName()));
		reflections.getFieldsAnnotatedWith(DAOTableIDField.class)
		           .forEach(f -> context.putIDField(f, f.getAnnotation(DAOTableIDField.class).autoGenerated()));
	}
	
	public TableContext getTableContext(Class<?> clazz) {
		return this.classToFieldsMap.get(clazz);
	}
	
	public TableContext getTableContext(String tableName) {
		return getTableContext(this.classToTableMap.inverse().get(tableName));
	}
}
